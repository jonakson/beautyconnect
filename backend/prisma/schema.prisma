// BeautyConnect Database Schema
// Prisma schema file for PostgreSQL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  firstName     String
  lastName      String
  phone         String?
  avatar        String?
  passwordHash  String
  role          UserRole @default(CUSTOMER)
  isActive      Boolean  @default(true)
  emailVerified Boolean  @default(false)
  lastLoginAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  ownedBusinesses Business[] @relation("BusinessOwner")
  staffMemberships StaffMember[]
  appointments    Appointment[]
  reviews         Review[]

  @@map("users")
}

model Business {
  id           String           @id @default(cuid())
  name         String
  slug         String           @unique
  description  String?
  email        String
  phone        String?
  website      String?
  address      Json // { street, city, state, postalCode, country, lat, lng }
  timezone     String           @default("Europe/Madrid")
  currency     Currency         @default(EUR)
  subscription Json             // { tier, staffCount, expiresAt }
  settings     Json             // { bookingWindow, minAdvanceBooking, bufferTime, etc. }
  businessHours Json            // Array of business hours per day
  socialMedia  Json?            // { facebook, instagram, twitter, website }
  images       String[]         @default([])
  isActive     Boolean          @default(true)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  // Relationships
  owner        User             @relation("BusinessOwner", fields: [ownerId], references: [id])
  ownerId      String
  staff        StaffMember[]
  services     Service[]
  appointments Appointment[]
  reviews      Review[]
  availabilityRules AvailabilityRule[]

  @@map("businesses")
}

model StaffMember {
  id           String    @id @default(cuid())
  displayName  String?
  bio          String?
  specialties  String[]  @default([])
  workingHours Json      // Array of working hours per day
  commission   Json?     // { type: 'percentage' | 'fixed', value: number }
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relationships
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  business     Business  @relation(fields: [businessId], references: [id])
  businessId   String
  appointments Appointment[]
  availabilityRules AvailabilityRule[]

  @@unique([userId, businessId])
  @@map("staff_members")
}

model Service {
  id          String          @id @default(cuid())
  name        String
  description String?
  category    ServiceCategory
  duration    Int             // minutes
  price       Decimal         @db.Decimal(10, 2)
  currency    Currency        @default(EUR)
  color       String?         // hex color for calendar
  isActive    Boolean         @default(true)
  requiresStaff Boolean       @default(true)
  maxAdvanceBooking Int?      // days
  bufferTime  Int?            // minutes
  resources   Json?           // Array of resources needed
  metadata    Json?           // { images, instructions, aftercareInstructions }
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relationships
  business     Business      @relation(fields: [businessId], references: [id])
  businessId   String
  appointments Appointment[]

  @@map("services")
}

model Customer {
  id               String    @id @default(cuid())
  email            String    @unique
  firstName        String
  lastName         String
  phone            String?
  dateOfBirth      DateTime?
  notes            String?
  preferences      Json?     // { language, notifications, marketing }
  tags             String[]  @default([])
  totalSpent       Decimal?  @db.Decimal(10, 2)
  totalAppointments Int      @default(0)
  lastAppointmentAt DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relationships
  appointments     Appointment[]
  reviews          Review[]

  @@map("customers")
}

model Appointment {
  id               String            @id @default(cuid())
  startTime        DateTime
  endTime          DateTime
  status           AppointmentStatus @default(PENDING)
  notes            String?
  internalNotes    String?
  price            Decimal?          @db.Decimal(10, 2)
  currency         Currency?         @default(EUR)
  reminderSent     Boolean           @default(false)
  confirmationSent Boolean           @default(false)
  metadata         Json?             // { source, ip, userAgent }
  cancelledAt      DateTime?
  cancelledBy      String?
  cancellationReason String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  // Relationships
  business         Business          @relation(fields: [businessId], references: [id])
  businessId       String
  service          Service           @relation(fields: [serviceId], references: [id])
  serviceId        String
  staff            StaffMember?      @relation(fields: [staffId], references: [id])
  staffId          String?
  customer         Customer?         @relation(fields: [customerId], references: [id])
  customerId       String?
  user             User?             @relation(fields: [userId], references: [id])
  userId           String?
  
  @@map("appointments")
}

model Review {
  id           String    @id @default(cuid())
  rating       Int       // 1-5
  comment      String?
  response     Json?     // { text, respondedAt, respondedBy }
  isVerified   Boolean   @default(false)
  isPublic     Boolean   @default(true)
  reportedAt   DateTime?
  moderatedAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relationships
  business     Business  @relation(fields: [businessId], references: [id])
  businessId   String
  customer     Customer  @relation(fields: [customerId], references: [id])
  customerId   String
  user         User      @relation(fields: [userId], references: [id])
  userId       String

  @@map("reviews")
}

model AvailabilityRule {
  id                String    @id @default(cuid())
  title             String?
  type              AvailabilityType
  isRecurring       Boolean   @default(false)
  startTime         DateTime?
  endTime           DateTime?
  recurringPattern  Json?     // { frequency, interval, daysOfWeek, endDate }
  timeSlots         Json?     // Array of time slots for daily recurring
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relationships
  business          Business     @relation(fields: [businessId], references: [id])
  businessId        String
  staff             StaffMember? @relation(fields: [staffId], references: [id])
  staffId           String?

  @@map("availability_rules")
}

// Enums
enum UserRole {
  OWNER
  MANAGER
  STAFF
  CUSTOMER
}

enum Currency {
  EUR
  GBP
}

enum ServiceCategory {
  HAIRCUT
  COLORING
  STYLING
  NAILS
  FACIAL
  MASSAGE
  WAXING
  EYEBROWS
  EYELASHES
  MAKEUP
  FITNESS
  WELLNESS
  OTHER
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum AvailabilityType {
  AVAILABLE
  UNAVAILABLE
  BREAK
}