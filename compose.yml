# Docker Compose Configuration
# BeautyConnect microservices setup

version: '3.8'

services:
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    container_name: beautyconnect_frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:4000
    depends_on:
      - backend
    networks:
      - beautyconnect_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: beautyconnect_backend
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://beautyconnect_user:${POSTGRES_PASSWORD:-beautyconnect_pass}@postgres:5432/beautyconnect
      - REDIS_URL=redis://redis:6379
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET:-your_jwt_access_secret_key_here}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET:-your_jwt_refresh_secret_key_here}
      - FRONTEND_URL=http://frontend:3000
      - CORS_ORIGIN=http://frontend:3000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - beautyconnect_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:4000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })\""]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:16-alpine
    container_name: beautyconnect_postgres
    environment:
      - POSTGRES_DB=beautyconnect
      - POSTGRES_USER=beautyconnect_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-beautyconnect_pass}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/prisma/migrations:/docker-entrypoint-initdb.d:ro
    networks:
      - beautyconnect_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U beautyconnect_user -d beautyconnect"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: beautyconnect_redis
    command: redis-server --appendonly yes --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - beautyconnect_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  beautyconnect_network:
    driver: bridge